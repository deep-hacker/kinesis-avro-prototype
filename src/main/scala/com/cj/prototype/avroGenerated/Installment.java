/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.cj.prototype.avroGenerated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Installment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2240648310023993662L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Installment\",\"namespace\":\"com.cj.prototype.avroGenerated\",\"fields\":[{\"name\":\"months\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AmountWithCurrency\",\"fields\":[{\"name\":\"amount\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"currency\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Installment> ENCODER =
      new BinaryMessageEncoder<Installment>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Installment> DECODER =
      new BinaryMessageDecoder<Installment>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Installment> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Installment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Installment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Installment>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Installment to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Installment from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Installment instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Installment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Integer months;
   private com.cj.prototype.avroGenerated.AmountWithCurrency amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Installment() {}

  /**
   * All-args constructor.
   * @param months The new value for months
   * @param amount The new value for amount
   */
  public Installment(java.lang.Integer months, com.cj.prototype.avroGenerated.AmountWithCurrency amount) {
    this.months = months;
    this.amount = amount;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return months;
    case 1: return amount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: months = (java.lang.Integer)value$; break;
    case 1: amount = (com.cj.prototype.avroGenerated.AmountWithCurrency)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'months' field.
   * @return The value of the 'months' field.
   */
  public java.lang.Integer getMonths() {
    return months;
  }


  /**
   * Sets the value of the 'months' field.
   * @param value the value to set.
   */
  public void setMonths(java.lang.Integer value) {
    this.months = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public com.cj.prototype.avroGenerated.AmountWithCurrency getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(com.cj.prototype.avroGenerated.AmountWithCurrency value) {
    this.amount = value;
  }

  /**
   * Creates a new Installment RecordBuilder.
   * @return A new Installment RecordBuilder
   */
  public static com.cj.prototype.avroGenerated.Installment.Builder newBuilder() {
    return new com.cj.prototype.avroGenerated.Installment.Builder();
  }

  /**
   * Creates a new Installment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Installment RecordBuilder
   */
  public static com.cj.prototype.avroGenerated.Installment.Builder newBuilder(com.cj.prototype.avroGenerated.Installment.Builder other) {
    if (other == null) {
      return new com.cj.prototype.avroGenerated.Installment.Builder();
    } else {
      return new com.cj.prototype.avroGenerated.Installment.Builder(other);
    }
  }

  /**
   * Creates a new Installment RecordBuilder by copying an existing Installment instance.
   * @param other The existing instance to copy.
   * @return A new Installment RecordBuilder
   */
  public static com.cj.prototype.avroGenerated.Installment.Builder newBuilder(com.cj.prototype.avroGenerated.Installment other) {
    if (other == null) {
      return new com.cj.prototype.avroGenerated.Installment.Builder();
    } else {
      return new com.cj.prototype.avroGenerated.Installment.Builder(other);
    }
  }

  /**
   * RecordBuilder for Installment instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Installment>
    implements org.apache.avro.data.RecordBuilder<Installment> {

    private java.lang.Integer months;
    private com.cj.prototype.avroGenerated.AmountWithCurrency amount;
    private com.cj.prototype.avroGenerated.AmountWithCurrency.Builder amountBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.cj.prototype.avroGenerated.Installment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.months)) {
        this.months = data().deepCopy(fields()[0].schema(), other.months);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasAmountBuilder()) {
        this.amountBuilder = com.cj.prototype.avroGenerated.AmountWithCurrency.newBuilder(other.getAmountBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Installment instance
     * @param other The existing instance to copy.
     */
    private Builder(com.cj.prototype.avroGenerated.Installment other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.months)) {
        this.months = data().deepCopy(fields()[0].schema(), other.months);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
      this.amountBuilder = null;
    }

    /**
      * Gets the value of the 'months' field.
      * @return The value.
      */
    public java.lang.Integer getMonths() {
      return months;
    }


    /**
      * Sets the value of the 'months' field.
      * @param value The value of 'months'.
      * @return This builder.
      */
    public com.cj.prototype.avroGenerated.Installment.Builder setMonths(java.lang.Integer value) {
      validate(fields()[0], value);
      this.months = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'months' field has been set.
      * @return True if the 'months' field has been set, false otherwise.
      */
    public boolean hasMonths() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'months' field.
      * @return This builder.
      */
    public com.cj.prototype.avroGenerated.Installment.Builder clearMonths() {
      months = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public com.cj.prototype.avroGenerated.AmountWithCurrency getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.cj.prototype.avroGenerated.Installment.Builder setAmount(com.cj.prototype.avroGenerated.AmountWithCurrency value) {
      validate(fields()[1], value);
      this.amountBuilder = null;
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'amount' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.cj.prototype.avroGenerated.AmountWithCurrency.Builder getAmountBuilder() {
      if (amountBuilder == null) {
        if (hasAmount()) {
          setAmountBuilder(com.cj.prototype.avroGenerated.AmountWithCurrency.newBuilder(amount));
        } else {
          setAmountBuilder(com.cj.prototype.avroGenerated.AmountWithCurrency.newBuilder());
        }
      }
      return amountBuilder;
    }

    /**
     * Sets the Builder instance for the 'amount' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.cj.prototype.avroGenerated.Installment.Builder setAmountBuilder(com.cj.prototype.avroGenerated.AmountWithCurrency.Builder value) {
      clearAmount();
      amountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'amount' field has an active Builder instance
     * @return True if the 'amount' field has an active Builder instance
     */
    public boolean hasAmountBuilder() {
      return amountBuilder != null;
    }

    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.cj.prototype.avroGenerated.Installment.Builder clearAmount() {
      amount = null;
      amountBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Installment build() {
      try {
        Installment record = new Installment();
        record.months = fieldSetFlags()[0] ? this.months : (java.lang.Integer) defaultValue(fields()[0]);
        if (amountBuilder != null) {
          try {
            record.amount = this.amountBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("amount"));
            throw e;
          }
        } else {
          record.amount = fieldSetFlags()[1] ? this.amount : (com.cj.prototype.avroGenerated.AmountWithCurrency) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Installment>
    WRITER$ = (org.apache.avro.io.DatumWriter<Installment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Installment>
    READER$ = (org.apache.avro.io.DatumReader<Installment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.months == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.months);
    }

    if (this.amount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.amount.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.months = null;
      } else {
        this.months = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.amount = null;
      } else {
        if (this.amount == null) {
          this.amount = new com.cj.prototype.avroGenerated.AmountWithCurrency();
        }
        this.amount.customDecode(in);
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.months = null;
          } else {
            this.months = in.readInt();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.amount = null;
          } else {
            if (this.amount == null) {
              this.amount = new com.cj.prototype.avroGenerated.AmountWithCurrency();
            }
            this.amount.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










